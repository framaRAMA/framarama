# Generated by Django 4.0.4 on 2022-07-20 17:14

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Finishing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('ordering', models.IntegerField()),
                ('title', models.CharField(help_text='Short name describing finishing', max_length=255, verbose_name='Title')),
                ('plugin', models.CharField(max_length=64)),
                ('image_in', models.CharField(blank=True, help_text='Name of image to modify (empty for default image)', max_length=64, null=True, verbose_name='Image input')),
                ('image_out', models.CharField(blank=True, help_text='Name to output modified image (empty for default)', max_length=64, null=True, verbose_name='Image output')),
                ('color_stroke', models.CharField(help_text='The forrground color (lines, text) to use in HEX (RGB)', max_length=16, verbose_name='Foreground color')),
                ('color_fill', models.CharField(blank=True, help_text='The background color (fill) to use in HEX (RGB)', max_length=16, null=True, verbose_name='Background color')),
                ('color_alpha', models.IntegerField(blank=True, help_text='The alpha value (transparency) between 0 and 100', null=True, verbose_name='Transparency')),
                ('enabled', models.BooleanField(verbose_name='Enabled')),
            ],
            options={
                'db_table': 'config_finishing',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='Frame',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text='A name for this frame configuration.', max_length=255, verbose_name='Name')),
                ('description', models.TextField(help_text='Provide a meaninful description.', verbose_name='Description')),
                ('enabled', models.BooleanField(verbose_name='Enabled')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('id_ext', models.CharField(help_text='Contains the external reference ID if available', max_length=255, null=True, verbose_name='External ID')),
                ('url', models.CharField(help_text='The address to use to load the data of item', max_length=1024, verbose_name='URL')),
                ('date_creation', models.DateTimeField(help_text='Date and time when the item was created', null=True, verbose_name='Date of creation')),
                ('views', models.IntegerField(default=0, help_text='Counter how often this item was shown', verbose_name='Views')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='config.frame')),
            ],
            options={
                'ordering': ['-created'],
            },
        ),
        migrations.CreateModel(
            name='Sorting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('ordering', models.IntegerField()),
                ('title', models.CharField(help_text='Short name describing this sorting', max_length=255, verbose_name='Title')),
                ('plugin', models.CharField(max_length=64)),
                ('weight', models.IntegerField(help_text='Specifies the weight and priority of sorting', verbose_name='Weight')),
                ('enabled', models.BooleanField(verbose_name='Enabled')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sortings', to='config.frame')),
            ],
            options={
                'ordering': ['-weight'],
            },
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text='Name describing the source', max_length=255, verbose_name='Name')),
                ('map_item_id_ext', models.CharField(blank=True, help_text="Which field to map to item's ID (optional, can be used for an external reference)", max_length=32, verbose_name='ID')),
                ('map_item_url', models.CharField(help_text="Which field to map to item's URL", max_length=32, verbose_name='URL')),
                ('map_item_date_creation', models.CharField(blank=True, help_text="Which field to map to item's creation date", max_length=32, verbose_name='Date')),
                ('map_item_meta', models.TextField(default='', help_text='When more fields should be mapped add them line by line (format: "&lt;target-name&gt;=&lt;source-name&gt;\\n")', verbose_name='Additional fields')),
                ('update_count', models.IntegerField(default=0, help_text='Amount of update ran', verbose_name='Update counter')),
                ('update_date_start', models.DateTimeField(help_text='Date when the update process was started', null=True, verbose_name='Start date of update')),
                ('update_date_end', models.DateTimeField(help_text='Date when the update process finished', null=True, verbose_name='End date of update')),
                ('update_error', models.CharField(help_text="Which field to map to item's creation date", max_length=256, null=True, verbose_name='Update error')),
                ('item_count_total', models.IntegerField(default=0, help_text='Amount of items currently imported', verbose_name='Total item count')),
                ('item_count_error', models.IntegerField(default=0, help_text='Amount of items failed to import', verbose_name='Error item count')),
                ('frame', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='config.frame')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SourceStep',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('ordering', models.IntegerField()),
                ('title', models.CharField(help_text='Short name of this step', max_length=255, verbose_name='Title')),
                ('description', models.CharField(help_text='Description of this step', max_length=255, verbose_name='Description')),
                ('instance', models.CharField(blank=True, help_text='Same instances names will share same internal state', max_length=255, verbose_name='Instance')),
                ('plugin', models.CharField(max_length=64)),
                ('data_in', models.CharField(blank=True, help_text='Use given file as input data', max_length=64, verbose_name='Input')),
                ('mime_in', models.CharField(blank=True, choices=[('', 'Auto (automatically detect mime type)'), ('text/csv', 'CSV (comma separated data)'), ('application/json', 'JSON'), ('text/plain', 'Plain text')], default='', help_text='Other then auto will override the type for input', max_length=64, verbose_name='Input data type')),
                ('merge_in', models.BooleanField(default=False, help_text='Use multiple input result as one merged result', verbose_name='Merge multiple input results')),
                ('data_out', models.CharField(blank=True, help_text='Save output data to given file', max_length=64, verbose_name='Output')),
                ('mime_out', models.CharField(blank=True, choices=[('', 'Auto (automatically detect mime type)'), ('text/csv', 'CSV (comma separated data)'), ('application/json', 'JSON'), ('text/plain', 'Plain text')], default='', help_text='Other then auto will override the type for output', max_length=64, verbose_name='Output data type')),
                ('loop_out', models.BooleanField(default=False, help_text='Use results as one or iterate over the results data rows separately', verbose_name='Iterate output results separately')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='steps', to='config.source')),
            ],
            options={
                'db_table': 'config_source_step',
                'ordering': ['ordering'],
            },
        ),
        migrations.CreateModel(
            name='RankedItem',
            fields=[
                ('item_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.item')),
                ('rank', models.IntegerField(help_text='Calculated rank for this item', verbose_name='Rank')),
            ],
            options={
                'managed': False,
            },
            bases=('config.item',),
        ),
        migrations.CreateModel(
            name='CustomModel',
            fields=[
                ('sorting_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.sorting')),
                ('code', models.TextField(help_text='Custom query to execute to generate a rank value', verbose_name='Query')),
            ],
            options={
                'db_table': 'config_sorting_custom',
            },
            bases=('config.sorting',),
        ),
        migrations.CreateModel(
            name='DataModel',
            fields=[
                ('sourcestep_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.sourcestep')),
                ('filter_in', models.CharField(blank=True, help_text='Filter data using given expression (e.g. <a href="https://pypi.org/project/jsonpath-python/" target="_blank">JSONPath</a>, <a href="https://docs.python.org/3/library/xml.etree.elementtree.html#elementtree-xpath" target="_blank">XPath</a>)', max_length=256, verbose_name='Input filter')),
                ('template_out', models.TextField(blank=True, help_text='Write a simple Jinja2 template (the "data" variable contains filter result)', verbose_name='Output template')),
            ],
            options={
                'db_table': 'config_source_step_data',
            },
            bases=('config.sourcestep',),
        ),
        migrations.CreateModel(
            name='HttpModel',
            fields=[
                ('sourcestep_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.sourcestep')),
                ('url', models.URLField(help_text='Enter the complete address (URL) to load', max_length=1024, verbose_name='Address (URL)')),
                ('url_formatted', models.BooleanField(default=False, verbose_name='URL includes format tokens')),
                ('method', models.CharField(choices=[('GET', 'GET Request'), ('POST', 'POST Request'), ('PUT', 'PUT Request'), ('HEAD', 'HEAD Request')], default='GET', help_text='Specify the type of the request (defaults to GET)', max_length=16, verbose_name='Type')),
                ('body', models.TextField(blank=True, verbose_name='Content')),
                ('body_type', models.CharField(blank=True, help_text='Content (body) and Content-Type to send with request', max_length=64, verbose_name='Content type')),
                ('body_formatted', models.BooleanField(default=False, verbose_name='Body includes format tokens')),
                ('auth_user', models.CharField(blank=True, help_text='Username to use for authentication (basic auth)', max_length=64, verbose_name='Username')),
                ('auth_pass', models.CharField(blank=True, help_text='Password to use for authentication (basic auth)', max_length=64, verbose_name='Password')),
                ('headers', models.TextField(default='{\n}\n', help_text='Specify additional headers in JSON structure (key=header name, value=header value)', verbose_name='Headers')),
            ],
            options={
                'db_table': 'config_source_step_http',
            },
            bases=('config.sourcestep',),
        ),
        migrations.CreateModel(
            name='ShapeModel',
            fields=[
                ('finishing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.finishing')),
                ('shape', models.CharField(help_text='The shapw to draw', max_length=32, verbose_name='Shape')),
                ('start_x', models.CharField(help_text='Starting point horizontally', max_length=64, verbose_name='X position')),
                ('start_y', models.CharField(help_text='Starting point vertically', max_length=64, verbose_name='Y position')),
                ('size_x', models.CharField(help_text='Ending point horizontally (or width)', max_length=64, verbose_name='X dimension')),
                ('size_y', models.CharField(help_text='Ending point vertically (or height)', max_length=64, verbose_name='Y dimension')),
            ],
            options={
                'db_table': 'config_finishing_shape',
            },
            bases=('config.finishing',),
        ),
        migrations.CreateModel(
            name='TextModel',
            fields=[
                ('finishing_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='config.finishing')),
                ('text', models.CharField(help_text='Text to show', max_length=256, verbose_name='Text')),
                ('font', models.CharField(help_text='Font name to use (e.g. Arial, Helvetica, Courier)', max_length=64, verbose_name='Font')),
                ('size', models.CharField(help_text='Font size', max_length=64, verbose_name='Size')),
                ('start_x', models.CharField(help_text='Starting point horizontally', max_length=64, verbose_name='X position')),
                ('start_y', models.CharField(help_text='Starting point vertically', max_length=64, verbose_name='Y position')),
                ('alignment', models.CharField(choices=[('left', 'Left'), ('right', 'Right'), ('center', 'Center')], help_text='How to align the text', max_length=16, verbose_name='Alignment')),
                ('border', models.CharField(blank=True, help_text='Draw border around the text with given width', max_length=16, null=True, verbose_name='Border')),
                ('border_radius', models.CharField(blank=True, help_text='Use rounded corners when drawing border', max_length=16, null=True, verbose_name='Border radius')),
                ('border_alpha', models.IntegerField(blank=True, help_text='The border alpha value (transparency) between 0 and 100', null=True, verbose_name='Border transparency')),
                ('border_padding', models.IntegerField(blank=True, help_text='Spacing between text and border', null=True, verbose_name='Border padding')),
            ],
            options={
                'db_table': 'config_finishing_text',
            },
            bases=('config.finishing',),
        ),
        migrations.CreateModel(
            name='ItemMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text='The name of the meta data field', max_length=128, verbose_name='Name')),
                ('value_text', models.CharField(help_text='Use this value to provide a text value (string)', max_length=255, null=True, verbose_name='Text value')),
                ('value_int', models.IntegerField(help_text='Use this value to provide a number (integer)', null=True, verbose_name='Number value')),
                ('value_date', models.DateTimeField(help_text='Use this value to provide a date', null=True, verbose_name='Date value')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='meta', to='config.item')),
            ],
            options={
                'db_table': 'config_item_meta',
            },
        ),
        migrations.AddField(
            model_name='item',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='config.source'),
        ),
        migrations.AddField(
            model_name='finishing',
            name='frame',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='finishings', to='config.frame'),
        ),
        migrations.CreateModel(
            name='Display',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text='A name for this display configuration.', max_length=255, verbose_name='Name')),
                ('description', models.TextField(help_text='Provide a meaninful description.', verbose_name='Description')),
                ('enabled', models.BooleanField(verbose_name='Enabled')),
                ('time_on', models.TimeField(blank=True, help_text='Hour and minute to switch display on.', null=True, verbose_name='Switch on')),
                ('time_off', models.TimeField(blank=True, help_text='Hour and minute to switch display off.', null=True, verbose_name='Switch off')),
                ('time_change', models.TimeField(help_text='Hour and minutes to show each image.', verbose_name='View')),
                ('device_type', models.CharField(blank=True, choices=[('rpi', 'Raspberry Pi')], help_text='Type of display.', max_length=32, null=True, verbose_name='Type')),
                ('device_width', models.IntegerField(help_text='Display width in pixels.', verbose_name='Width')),
                ('device_height', models.IntegerField(help_text='Display height in pixels.', verbose_name='Height')),
                ('access_key', models.CharField(blank=True, help_text='A secret access token to access data for display.', max_length=64, null=True, verbose_name='Key')),
                ('frame', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='config.frame')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]

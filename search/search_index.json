{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"framaRAMA","text":"<p>Keep your memories alive with framaRAMA. The smart way to show your memories from a photo collection on a digital photo frame.</p> <p>Features:</p> <ul> <li>\ud83d\udcf7 configure multiple different sets of photos</li> <li>\ud83d\udcfa show them on different devices</li> <li>\ud83e\udd1d integrate you own photo collections</li> <li>\ud83c\udfaf priorize the photos to show by meta data (e.g. date taken)</li> <li>\ud83e\ude84 add make up to your photos (resize, write text, etc)</li> <li>\ud83c\udf7f enjoy your memories</li> </ul>"},{"location":"#how-to-start","title":"How to start","text":"<p>The software consists of mainly two parts: * the server component, for administration and management * the frontend component, for displaying the photos</p> <p>Usually the server component is setup on a central device or server and the frontend component is runningo on a device attached to a display (e.g. a Raspberry Pi with a display connected). But it's also possible to run both components on the same device.</p>"},{"location":"#general-setup","title":"General setup","text":"<p>Follow the steps below to setup both components on the same system. If you want to separate them, see sections below.</p> <p>\ud83d\udce2 Before starting check the requirements of the components below and install them if required.</p> <pre><code>git clone https://github.com/framaRAMA/framarama.git framarama\ncd  framarama\nmkdir data\npython -m ven venv\n. ./venv/bin/activate\npip install -r requirements.txt\n</code></pre> <p>Running both components on one system, set <code>MODES</code> in <code>framarama/settings.py</code>:</p> <pre><code>    'MODES': [\n        'server',\n        'frontend'\n    ],\n</code></pre> <p>Start application:</p> <pre><code>python manage.py runserver 0.0.0.0:8000 --noreload\n</code></pre> <p>... and navigate browser to * http://server:8000/config/ for server setup or * http://server:8000/frontend/ for frontend setup</p> <p>Enjoy!</p>"},{"location":"#server-setup","title":"Server setup","text":"<p>This component is the central place where all the configuration and setup is done. It is providing a web interface to setup your photo collection and assign them to different frames or displays.</p> <p>Checkout the project as mentioned before and adjust the configuration:</p> <pre><code>    'MODES': [\n        #'server',\n        'frontend'\n    ],\n</code></pre> <p>The server component depends on the following dependencies: * \u261d <code>python3</code>, <code>python3-venv</code>, <code>python3-dev</code> - standard Python environment * \u261d <code>gsfonts</code>, <code>gsfonts-other</code>, <code>fonts-liberation</code>, <code>fonts-urw-base35</code>, <code>fonts-freefont-ttf</code>, <code>fonts-freefont-otf</code> - fonts support, might be other packages (install them an check via <code>convert -list font</code>) * \ud83d\udca1 <code>libmariadb3</code> - for external database support</p> <p>After application startup you can open the server setup in the browser.</p>"},{"location":"#frontend-setup","title":"Frontend setup","text":"<p>This component is used to retrieve data from the server component and prepare the photo to display it - usually - locally on the display connected to the device.</p> <p>Checkout the project as mentioned before and adjust the configuration:</p> <pre><code>    'MODES': [\n        #'server',\n        'frontend'\n    ],\n</code></pre> <p>The frontend component depends on the following dependencies: * \u261d <code>python3</code>, <code>python3-venv</code>, <code>python3-dev</code> - standard Python environment * \ud83d\udca1 <code>network-manager</code>, <code>dnsmasq-base</code> - configuring and setting up networking * \ud83d\udca1 <code>plymouth</code>, <code>plymouth-themes</code>, <code>plymouth-x11</code> - create startup booting screen * \ud83d\udca1 <code>xserver-xorg</code>, <code>xrandr|x11-server-utils</code>, <code>xinit</code>, <code>openbox</code>, <code>feh</code>, <code>imagemagick</code> - show pictures using graphical frontend * \ud83d\udca1 <code>xinput</code> - register keystores for fallback commands</p> <p>After application startup you can open the frontend setup in the browser.</p>"},{"location":"#final-notes","title":"Final notes","text":"<p>This project was born because we all have large collection of photo but don't regularly look at them to benefit. Maybe we have some photos in some photo frames on walls or we have some of them in paper albums. But how often do we look at them to enjoy the memory?</p> <p>With this project you can resurrect you memories by showing your photos on a digital photo frame.</p> <p>If you like this project, please donate. Thanks!</p>"},{"location":"architecture/","title":"Architecture","text":"<p>The application is split up into a server component and a frontend component. Each component can be run on own devices where the frontend component is interacting with the server component by using an API.</p> <p>This way the server component can be run on a central device, which provides all the information about the frontends used, the photos in collections, the photo processing and more.</p> <p>And the frontend component is interacting remotely with the server component using the API provided by the server component.</p> <p>On the other hand it is also possible to run both components on the same system. In this case the server API is also used, but just from the local device - no change in the architecture.</p>"},{"location":"architecture/#server-component","title":"Server component","text":"<p>The place where all the configuration is set up is the server component. It provides an web interface which can be used to setup photo collections, apply some further processing, configure displays to show them.</p> <p>For this case the following parts can be configured:</p> <ul> <li>frames - a frame is a representation for a photo collection</li> <li>displays - a display is a physical device showing content from a frame</li> </ul> <p></p>"},{"location":"architecture/#frontend-component","title":"Frontend component","text":"<p>This component runs on the device showing the photos. Usually a device connected to a display/monitor.</p> <p>There're also some settings which are frontend specific and which can be managed by a web interface (e.g. device geometry, network setup, etc.).</p> <p></p>"},{"location":"architecture/#api","title":"API","text":"<p>All components mentioned before provides an API. The frontend API is used by the frontend itself, the server API is used by the frontend.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v050","title":"v0.5.0","text":"<ul> <li>update to Django 4.0.10, create some documentation pages, add workflows</li> <li>config: ignore duplicates when updating source items</li> <li>config: extend length for text in text plugin</li> <li>config: improve data_check command (generators, chunks)</li> <li>config: some dashboard improvements</li> </ul>"},{"location":"changelog/#v040-2023-04-09","title":"v0.4.0 - 2023-04-09","text":"<ul> <li>frontend: refactor frontend rendering, add website renderer</li> <li>frontend: render date time in frontend's timezone</li> <li>frontend: configure/disable display status submission information</li> <li>frontend: use hit endpoint via POST and submit thumbnails</li> <li>frontend: refactor/simplify frontend capability handling</li> <li>frontend: improve quality on picture watermark</li> <li>frontend: redirect user for config changes or action to origin page</li> <li>frontend: configure timezone to use</li> <li>config: add \"setup\" command to create/modify initial config settings</li> <li>config: add \"data_check\" command to verify data model/files integrity</li> <li>config: render date time in user's timezone</li> <li>config: pages to view and edit profile, including new timezone setting</li> <li>config: integrate thumbnails in different pages (frames, displays, items)</li> <li>config: introduced frame context management (inject data to finishing, e.g. exif, geo)</li> <li>config: add update interval per frame source</li> <li>config, api: add data model, use for display item thumbnails</li> <li>config, frontend, api: refactor finishing fields into plugin config</li> <li>config: enhance dashboard and add own dashboard to display pages</li> <li>config, frontend: refactor device capability into own file</li> <li>config: extend alignment and add custom position/coordinates to merge plugin</li> <li>api: implement new display item hit endpoint via POST</li> <li>api: include version information in user-agent</li> </ul>"},{"location":"changelog/#v030-2023-01-11","title":"v0.3.0 - 2023-01-11","text":"<ul> <li>frontend: auto-update and refresh display settings per interval</li> <li>frontend: use custom messages when saving configuration (redirect to startup page)</li> <li>frontend: refactor startup screen to own pages (can be used for different things now)</li> <li>frontend: add current revision to app version info and in display status</li> <li>frontend: activate latest item - if available - when restarting application</li> <li>frontend: introduced a new frontend API</li> <li>frontend: refactor views into own packages (setup, dashboard, system, status)</li> <li>frontend: check sudo commands before execution (avoid security warnings)</li> <li>config, frontend: refactor jobs / scheduler</li> <li>config: add new image finishing plugin</li> <li>config: replace source update with scheduler job and run auto-updates</li> <li>config: fix mapping app fields in display status</li> <li>api: refactor urls and views into own packages (config, later frontend)</li> </ul>"},{"location":"changelog/#v020-2023-01-03","title":"v0.2.0 - 2023-01-03","text":"<ul> <li>frontend: provide buttons to check for updates and install updates</li> <li>frontend: show version information in own frontend page</li> <li>frontend: add button in display frontend page to load next item</li> <li>frontend, config: submit display status information</li> <li>frontend: keep current item in own file, not only in numbered files</li> <li>frontend: extend network check for static/LAN configurations</li> <li>frontend: fix not starting keyboard monitoring when commands missing</li> <li>config: fix setting external ID when updating items </li> <li>api: make all endpoint read-only endpoints</li> </ul>"},{"location":"changelog/#v010-2022-12-24","title":"v0.1.0 - 2022-12-24","text":"<ul> <li>first release version with all basic features</li> </ul>"},{"location":"config/","title":"Configuration","text":"<p>The application configuration is mainly placed into the <code>framarama/settings.py</code> file. Please adjust settings there.</p>"},{"location":"config/#general","title":"General","text":""},{"location":"config/#secret_key","title":"<code>SECRET_KEY</code>","text":"<p>Default: temporary key</p> <p>This configures a secret key which is used internally for different things. Please do not use the default and change it to something really serect.</p>"},{"location":"config/#framaramamodes","title":"<code>FRAMARAMA.MODES</code>","text":"<p>Default: <code>server</code> and <code>frontend</code></p> <p>Defines which component to start: server, frontend or both. Just comment in or out to define what to start.</p> <p>Only start server component:</p> <pre><code>'MODES': [\n    'server',\n],\n</code></pre> <p>Only start frontend component:</p> <pre><code>'MODES': [\n    'frontend',\n],\n</code></pre> <p>Only start both components:</p> <pre><code>'MODES': [\n    'server',\n    'frontend',\n],\n</code></pre>"},{"location":"config/#framaramadata_path","title":"<code>FRAMARAMA.DATA_PATH</code>","text":"<p>Default: <code>./data/</code></p> <p>Should point to a directory where the application can store some data. Please do not point this to a temporary directory. It will contain persistent data which should not be deleted.</p>"},{"location":"config/#server","title":"Server","text":""},{"location":"config/#framaramaadmin_username","title":"<code>FRAMARAMA.ADMIN_USERNAME</code>","text":"<p>Default: <code>admin</code></p> <p>Contains the username for the adminstrative user which will be created initially when starting the server application for the first time.</p>"},{"location":"config/#framaramaadmin_password","title":"<code>FRAMARAMA.ADMIN_PASSWORD</code>","text":"<p>Default: <code>testabc123</code></p> <p>The simple administrator password - please change it!</p>"},{"location":"config/#framaramaadmin_mail","title":"<code>FRAMARAMA.ADMIN_MAIL</code>","text":"<p>Default: <code>admin@some-domain.tld</code></p> <p>This is the mail address used for the administrative user. Currently it does not have any effect, and do not require a valid mail address.</p>"},{"location":"config/#framaramaconfig_thumbnail_size","title":"<code>FRAMARAMA.CONFIG_THUMBNAIL_SIZE</code>","text":"<p>Default: <code>[640, 480]</code></p> <p>When the frontend component submits the photo to the server it is also providing a thumbnail of the current photo. If not specified the thumbnail is generated on the server side.</p>"},{"location":"config/#framaramaconfig_source_update_interval","title":"<code>FRAMARAMA.CONFIG_SOURCE_UPDATE_INTERVAL</code>","text":"<p>Default: <code>23:00:00</code></p> <p>The interval (hours, minutes, seconds) when the server is updating the photo collection and adding, removing or updating them on the server. Set the value to <code>None</code> to disable automatic updates completely.</p>"},{"location":"config/#frontend","title":"Frontend","text":""},{"location":"config/#framaramafrontend_item_update_interval","title":"<code>FRAMARAMA.FRONTEND_ITEM_UPDATE_INTERVAL</code>","text":"<p>Default: <code>00:05:00</code></p> <p>The inverval (hours, minutes, seconds) when the frontend is updating the display settings and applying them.</p>"},{"location":"config/#framaramafrontend_thumbnail_size","title":"<code>FRAMARAMA.FRONTEND_THUMBNAIL_SIZE</code>","text":"<p>Default: <code>[640, 480]</code></p> <p>This defines the resolution to use when generating a thumbnail of the photos displayed on the frontend. It is used in the frontend application and - when activated - when sumbmitting them to the server.</p>"},{"location":"install/","title":"Installation","text":"<p>The application is split into different components:</p> <ul> <li>the server component which provides all the configuration and setup of photo collections</li> <li>the frontend component which displays the photos</li> </ul> <p>It can be setup to run both components on one system (e.g. a Raspberry Pi connected to a display) or separately (e.g. server on a Raspberry Pi and frontend on a different Raspberry Pi connected to a display).</p> <p>For each device running one of the components you have to</p> <ul> <li>checkout the source code</li> <li>setup a Python environment</li> <li>install required Python dependencies</li> <li>install required system dependencies</li> <li>configure components to start</li> </ul>"},{"location":"install/#general-installation","title":"General installation","text":"<p>As mentioned before, the components can be installed on different devices. All of them require some common installation steps described in the next section.</p> <p>After the common installation proceed with the server and/or frontend installation steps.</p>"},{"location":"install/#common-installation","title":"Common installation","text":"<p>Checking out the source code:</p> <pre><code>git clone https://github.com/framaRAMA/framarama.git framarama\ncd framarama\n</code></pre> <p>Setup a Python environment:</p> <pre><code>python -m venv venv\n. ./venv/bin/activate\n</code></pre> <p>Installing Python dependencies:</p> <pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"install/#server-installation","title":"Server installation","text":"<p>After completion of the general installation proceed with the follwing steps for the server installation.</p> <pre><code># Basic fonts support\nsudo apt-get install gsfonts gsfonts-other\nsudo apt-get install fonts-liberation fonts-urw-base35 fonts-freefont-ttf fonts-freefont-otf\n\n# When using external MariaDB database instead of SQLite (optional)\nsudo apt-get install libmariadb3\n</code></pre>"},{"location":"install/#frontend-installation","title":"Frontend installation","text":"<p>After completion of the general installation proceed with the follwing steps for the frontend installation.</p> <pre><code># For standalone device setup (all in one) install the following (optional)\n\n# Network configuration/discovery support\nsudo apt-get install network-manager dnsmasq-base\n\n# Startup/shutdown screens\nsudo apt-get install plymouth plymouth-themes plymouth-x11\n\n# Displaying locally on a connected device using X server\nsudo apt-get install xserver-xorg [xrandr|x11-server-utils] xinit openbox feh imagemagick\n\n# Support for keystrokes\nsudo apt-get install xinput\n</code></pre>"},{"location":"install/#configuration","title":"Configuration","text":"<p>Basic configuration is done in <code>framarama/settings.py</code>. This contains the basic startup configuration (server, frontend or both). Just comment the component which should not be started:</p> <pre><code>'MODES': [\n    'server',\n    'frontend'\n],\n</code></pre> <p>On first startup the database will be initialized and the initial admin user will be created. The default credentials can also be configured (please change them):</p> <pre><code>'ADMIN_USERNAME': 'admin',\n'ADMIN_PASSWORD': 'testabc123',\n</code></pre> <p>Please also set a new secret key by generating them with random characters (e.g using a password manager):</p> <pre><code>SECRET_KEY = 'django-insecure-@+o7lclaqfg8rkb0dp$q&amp;eibn1b$-#-!)@ayalffvx7ztlwkf@'\n</code></pre>"},{"location":"install/#starting-application","title":"Starting application","text":"<p>To start the application use the following command:</p> <pre><code>python manage.py runserver --noreload\n</code></pre> <p>This will start the application and serve it using the following URLs:</p> <ul> <li>http://system:8000/frontend/ - the frontend running on the device showing pictures</li> <li>http://system:8000/config/ - the server running to configure the photo collections</li> </ul>"},{"location":"frontend/","title":"Interface","text":"<p>The frontend web interface can be used to setup and configure the device showing the photos.</p> <p>Use the \"\u2699\" (gear) button to change to the server frontend to update the server configuration.</p>"},{"location":"frontend/#overview","title":"Overview","text":"<p>The overview page shows the mode of the device (local or cloud setup) and basic information.</p> <p>Use the \"\u270f\" (pencil) button to change the mode setup.</p>"},{"location":"frontend/#display","title":"Display","text":"<p>To review and change the settings for the display open this page. It shows the latest photos shown, it can be used to change the photo or toggle the display.</p> <p>Use the \"\u270f\" (pencil) button to change the display settings.</p> <p>Use the \"\ud83d\uddbc\" (photo) button to show the currently visible photo in the slides (e.g. when switching back to the previous image).</p> <p>Use the \"\ud83d\udd01\" (reload) button to immediately trigger a photo change.</p> <p>Use the \"\ud83d\udcfa\" (display) button to toggle the display (switch on or off).</p>"},{"location":"frontend/#device","title":"Device","text":"<p>This page shows some technical information (like CPU load or memory usage). It provides functions to configure the system.</p> <p>Use the \"\ud83d\udedc\" (wifi) button to show wireless networks in range and connect to one of them or to activate a wireless access point.</p> <p>Use the \"\ud83d\uddd2\" (file) button to show the recent log entries. Also shows the service status.</p> <p>Use the \"\u21a9\" (restart) button to restart the device.</p> <p>Use the \"\u23fa\" (stop) button to shut down the device.</p>"},{"location":"frontend/#software","title":"Software","text":"<p>The software page shows the version information the software running currently. It can be used to update the version.</p> <p>Use the \"\ud83d\udd01\" (reload) button to check for software updates.</p> <p>Use the \"\u2b07\" (download) button to update to a given version.</p>"},{"location":"server/","title":"Interface","text":"<p>The server is used to configure and setup all the things needed to know to present you some photos through a frontend.</p>"},{"location":"server/dashboard/","title":"Dashboard","text":"<p>When opening the server web interface a dashboard will be presented showing some details about the system and the configuration.</p> <p>From this point you can reach all the further configuration pages.</p>"},{"location":"server/displays/","title":"Displays","text":"<p>A display is a physical device which will show a photo collection. The photo collection is setup in a frame and a frame can be assigned to a display.</p>"},{"location":"server/displays/#overview","title":"Overview","text":"<p>A dashboard for a display is available in the overview page. It shows different information about the runtime (if data is submitted by the device), the photo collections shown and more.</p>"},{"location":"server/displays/#info","title":"Info","text":"<p>Common information about a display can be specified here:</p> <ul> <li>Name - a short name</li> <li>Description - a longer description</li> <li>Enabled - a status if processing should take place or not</li> <li>Frame - the frame assigned</li> </ul>"},{"location":"server/displays/#device","title":"Device","text":"<p>Settings for the physical device can be setup on this page:</p> <ul> <li>Type - the type of the device</li> <li>Width - the horizontal geometry</li> <li>Height - the vertical geometry</li> </ul>"},{"location":"server/displays/#time","title":"Time","text":"<p>Specify the activation time and interval for photo change:</p> <ul> <li>On - the time when device should be switched on</li> <li>Off - the time when device should be switched off</li> <li>Change - the duration to show a photo</li> </ul>"},{"location":"server/displays/#access","title":"Access","text":"<p>Configure the remote access for this display:</p> <ul> <li>Key - the access key to use for access from a frontend device</li> </ul>"},{"location":"server/frames/","title":"Frames","text":"<p>A frame is a configuration contain used to group and configure photo collections. It defines which photos to show, how to process them, how to priorize them and much more.</p> <p>The system can manage multiple frames to separate and configure different photo collections.</p>"},{"location":"server/frames/#info","title":"Info","text":"<p>Common information about a frame can be specified here:</p> <ul> <li>Name - a short name</li> <li>Description - a longer description</li> <li>Enabled - a status if processing should take place or not</li> <li>Displays - a list of displays using this frame</li> </ul>"},{"location":"server/frames/#sources","title":"Sources","text":"<p>To specify which photos should be placed into the collection a source need to be configured. It is possible to setup multiple sources for a frame (e.g. add some photos from collection A and some photos from collection B).</p>"},{"location":"server/frames/#info_1","title":"Info","text":"<p>Each source have some basic settings:</p> <ul> <li>Name - a name</li> <li>Update interval - the interval to refresh the collection</li> <li>Result mapping - list of fields to map (for ID, for URL, for take date)</li> <li>Meta mapping - optionally more additional meta fields</li> </ul> <p>The info page shows the common information about the source. It provides also information about the last update run of the photo collection.</p>"},{"location":"server/frames/#queue","title":"Queue","text":"<p>To specify where to get the photo collection actually, a queue is setup. This consists of multiple items where at the end of the queue will drop out a list of photo URLs.</p> <p>Some different types of steps can be added to the queue (e.g. load and URL via HTTP, transform or filter the data, etc.). These types are called source plugins.</p> <p>When using a type of plugin multiple times in the queue, they are run separately. But in some cases you need to use the same type of plugin running in the same context (e.g. when logging into a web site in one step, and loading some data requiring the authentication before).</p> <p>Depending on the type of the plugin some information need to be provided. Details about the source plugins are described in the plugin section.</p> <p>Use the \"\u2795\" (add) button to add a new step or the \"\u25b6\" (play) button to start an update.</p>"},{"location":"server/frames/#items","title":"Items","text":"<p>To review the items in the current photo collection this page can be used to view the resulting collection. It shows some details (id, thumbnail, URL) and provides a basic search functionality.</p>"},{"location":"server/frames/#sorting","title":"Sorting","text":"<p>The sorting can be used to reorder or priorize the photos in the collection by some criteria.</p> <p>Depending on the type of the plugin some information need to be provided. Details about the source plugins are described in the plugin section.</p> <p>Use the \"\u2795\" (add) button to add a new sorting.</p>"},{"location":"server/frames/#finishing","title":"Finishing","text":"<p>When displaying a photo on a digital digiframe the source photo requires some preparations (e.g. resize to the geometry of the display, add some blurred borders, etc.). These operations can be defined in this page.</p> <p>There are different plugins to manipulate the source photo and each operation can generate a new image or an additional image.</p> <p>Details about the finishing plugins are described in the plugin section.</p> <p>Use the \"\u2795\" (add) button to add a new finishing or the \"\ud83d\udc41\" (eye) button to preview the current set with an random image of the photo collection.</p>"},{"location":"server/frames/#context","title":"Context","text":"<p>The context is used to provide some (meta) information for the finishing. This could be the general EXIF information of the photo or the resolved geo location (the country, city, etc.).</p> <p>Details about the context plugins are described in the plugin section.</p> <p>Use the \"\u2795\" (add) button to add a new context.</p>"},{"location":"server/plugins/","title":"Overview","text":"<p>Different parts of the system is using a plugin system to be extendable. These are:</p> <ul> <li>source plugins - for building the photo collections</li> <li>sorting plugins - for sorting and prioizing the photos in the collection</li> <li>finishing plugins - for finalizing a photo for display</li> <li>context plugin - for providing context information in finalizing process</li> </ul>"},{"location":"server/plugins/context/","title":"Context","text":"<p>To provide more meta information to the finishing process contexts can be defined.</p> <p>Common fields for all contexts:</p> <ul> <li>name - name for context information to access the data</li> <li>context - enables the use of this finishing</li> </ul>"},{"location":"server/plugins/context/#exif","title":"exif","text":"<p>Provide EXIF information of an image.</p> <p>Fields:</p> <ul> <li>image - provide EXIF information of this image</li> </ul>"},{"location":"server/plugins/context/#geo","title":"geo","text":"<p>Provide geo location information of an image.</p> <p>Fields:</p> <ul> <li>image - provide geo location information of this image</li> </ul>"},{"location":"server/plugins/finishing/","title":"Finishing","text":"<p>The finishings define the post processing of the item before showing it. It can be use to scale, convert or annotate the image.</p> <p>Common fields for all finishings:</p> <ul> <li>title - a short title</li> <li>image_in - name of input image</li> <li>image_out - name of output image</li> <li>enabled - enables the use of this finishing</li> </ul>"},{"location":"server/plugins/finishing/#image","title":"image","text":"<p>Loads an image from the given URL.</p> <p>Fields:</p> <ul> <li>url - the URL to load images from (files, URLs, bytes)</li> </ul>"},{"location":"server/plugins/finishing/#resize","title":"resize","text":"<p>Resize the image to given geometry.</p> <p>Fields:</p> <ul> <li>resize_x - the target X (width) resolution in pixels</li> <li>resize_y - the target Y (height) resolution in pixels</li> <li>keep_aspect - flag to keep aspect (only use maximum resolution of X or Y)</li> </ul>"},{"location":"server/plugins/finishing/#text","title":"text","text":"<p>Add text to the image using a given font style (e.g. weight, size).</p> <p>Fields:</p> <ul> <li>font - the name of font to use (e.g. Helvetica)</li> <li>weigth - the weight to use (e.g. 400)</li> <li>text - text to add</li> <li>size - size to use</li> <li>color_stroke - color for text</li> <li>stroke_width - width for strokes</li> <li>color_fill - the fill color</li> <li>color_alpha - alpha/transparency of the color</li> <li>alignment - text alignment</li> <li>start_x - X position to start with text</li> <li>start_y - Y position to start with text</li> <li>border - border size to use</li> <li>border_radius - size of rounded corners</li> <li>border_alpha - alpha/transparency of the color</li> <li>border_padding - spacing between text and border</li> </ul>"},{"location":"server/plugins/finishing/#shape","title":"shape","text":"<p>Draw a simple shape (e.g. lines, rectangles)</p> <p>Fields:</p> <ul> <li>shape - the shape to draw</li> <li>color_stroke - color to use for drawing</li> <li>color_fill - the fill color</li> <li>color_alpha - alpha/transparency of the color</li> <li>start_x - X position to start with shape</li> <li>start_y - Y position to start with shape</li> <li>size_x - the target horizontal size defining the ending point</li> <li>size_y - the target vertical size defining the ending point</li> </ul>"},{"location":"server/plugins/finishing/#transform","title":"transform","text":"<p>Transform the image using a predefined filter.</p> <p>Fields:</p> <ul> <li>type - the type of the transformation (e.g. blur)</li> <li>factor - the factor for the transformation</li> </ul>"},{"location":"server/plugins/finishing/#merge","title":"merge","text":"<p>Merge images to one image using given merge strategy.</p> <p>Fields:</p> <ul> <li>alignment - The alignment to use when merging</li> <li>left - when using coordinates use this as horizontal position</li> <li>top - when using coordinates use this as vertical position</li> </ul>"},{"location":"server/plugins/sorting/","title":"Sorting","text":"<p>To priorize and define an order of items in the photo collection the sorting plugins can be used.</p> <p>Common fields for all sortings:</p> <ul> <li>title - a short title</li> <li>weight - the weight of the sorting to take more importance</li> <li>enabled - enables the use of this sorting</li> </ul>"},{"location":"server/plugins/sorting/#custom","title":"custom","text":"<p>Specifies a custom query to use to order the items by using the query set API.</p> <p>Fields:</p> <ul> <li>code - the query to execute to priorize the items</li> </ul>"},{"location":"server/plugins/source/","title":"Sources","text":"<p>The source plugins can be used to build the photo collection for a frame.</p> <p>All configured source steps can use a given plugin and will receive input data (generated from a previous step) and provide output data (which is handed over to the next plugin).</p> <p>The generated output data can have a name. Previously generated output data with the same name will overwrite existing data. But using different names can help to separate them in logical steps.</p> <p>Common fields for all source steps:</p> <ul> <li>title - a short title</li> <li>description - brief description what it does</li> <li>instance - optional instance name</li> <li>data_in - if required provide input data</li> <li>mime_in - if auto detection fails specify the mime type of input data</li> <li>merge_in - flag to merge all input data into one input data before processing</li> <li>data_out - if required provide name for output data</li> <li>mime_out - if required provide mime type of output data</li> <li>loop_out - flag if following steps should loop over generated output data</li> </ul>"},{"location":"server/plugins/source/#data","title":"data","text":"<p>Manipulates a given input data (e.g. a CSV list) and convert/filter/strip data from it to generate new output data.</p> <p>Fields:</p> <ul> <li>filter_in - if data should be filtered provide a filter expression</li> <li>template_out - if output data should be transformed provide a template</li> </ul>"},{"location":"server/plugins/source/#http","title":"http","text":"<p>Retrieve input data by fetching a given URL (which could be a remote CSV data file) to provide it as new output data.</p> <p>Fields:</p> <ul> <li>url_formatted - enable in case you use tokens, placeholders or variables</li> <li>url - the URL to fetch</li> <li>method - the method to use (GET, POST, etc.)</li> <li>body_formatted - enable in case you use tokens, placeholders or variables</li> <li>body - the body to submit in request</li> <li>body_type - the content type to set (e.g. <code>application/x-www-form-urlencoded</code>)</li> <li>auth_user - username for basic authentication</li> <li>auth_pass - password for basic authentication</li> <li>headers - additional list of headers as JSON structure</li> </ul>"}]}